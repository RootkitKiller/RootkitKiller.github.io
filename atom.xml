<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rootkitkiller.github.io</id>
    <title>韭菜</title>
    <updated>2021-03-17T15:13:08.550Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rootkitkiller.github.io"/>
    <link rel="self" href="https://rootkitkiller.github.io/atom.xml"/>
    <subtitle>coding、bitcoin</subtitle>
    <logo>https://rootkitkiller.github.io/images/avatar.png</logo>
    <icon>https://rootkitkiller.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 韭菜</rights>
    <entry>
        <title type="html"><![CDATA[从零开始启动EOSIO（一）]]></title>
        <id>https://rootkitkiller.github.io/N2G8ro4Al/</id>
        <link href="https://rootkitkiller.github.io/N2G8ro4Al/">
        </link>
        <updated>2021-03-17T13:52:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<ul>
<li>EOSIO版本：EOSIO2.0</li>
<li>参考教程：<a href="https://developers.eos.io/welcome/latest/tutorials/bios-boot-sequence">https://developers.eos.io/welcome/latest/tutorials/bios-boot-sequence</a></li>
<li>有效时间：2020.3.17</li>
<li>系统：MacOS</li>
</ul>
<h1 id="安装">安装</h1>
<h2 id="安装eosio">安装EOSIO</h2>
<pre><code class="language-sh">brew tap eosio/eosio
brew install eosio
</code></pre>
<h2 id="安装eosiocdt">安装EOSIO.CDT</h2>
<pre><code class="language-sh">brew tap eosio/eosio.cdt
brew install eosio.cdt
</code></pre>
<h1 id="启动">启动</h1>
<h2 id="背景-2">背景</h2>
<p>在启动EOSIO网络之前，我们需要知道，EOSIO每条链都默认了一个eosio账户，这个账户称为开发账户，这个账户用来签署系统合约</p>
<h2 id="配置cleos钱包">配置cleos钱包</h2>
<ul>
<li>在当前目录创建一个钱包，需要注意：输出结果中会有钱包密钥，请把它保存下来</li>
</ul>
<pre><code class="language-sh">cleos wallet create --to-console
# 例如我的钱包解锁密码为`PW5J5gP8Foi1eZjEiZdEX4KpqEcK1Prvuiveo5n9oX6Gnp7c5ezip`
</code></pre>
<ul>
<li>将开发账户eosio的私钥导入到钱包中，密钥是固定的</li>
</ul>
<pre><code class="language-sh">cleos wallet import
5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3
</code></pre>
<ul>
<li>再生成一堆密钥，用来配置区块生产者（需要注意：生产者密钥不能与Owner密钥相同，即不能使用默认的eosio私钥）</li>
</ul>
<pre><code class="language-sh">cleos create key --to-console
# 将生成的生产者密钥保存下来，例如我的输出结果是
# Private key: 5JVHHGPPA7P4A9NQ49iWSoBbEiZXo52g7yUaSkdnXJp7jCYZinH
# Public key: EOS7KuvQBMyadqWcewxdjbQR5BJszD41Go4Y6Zy9yDJYoTRtzM76v
</code></pre>
<h2 id="配置keosd节点并启动">配置keosd节点并启动</h2>
<h3 id="创建默认配置文件">创建默认配置文件</h3>
<ul>
<li>创建<code>biosboot/genesis</code>目录</li>
</ul>
<pre><code class="language-sh"># 目录结构如图
biosboot
└── genesis
</code></pre>
<ul>
<li>在<code>biosboot/</code>目录下创建一个<code>genesis.json</code>文件，内容如下：</li>
</ul>
<pre><code class="language-json">{
  &quot;initial_timestamp&quot;: &quot;2018-12-05T08:55:11.000&quot;,
  &quot;initial_key&quot;: &quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;,
  &quot;initial_configuration&quot;: {
    &quot;max_block_net_usage&quot;: 1048576,
    &quot;target_block_net_usage_pct&quot;: 1000,
    &quot;max_transaction_net_usage&quot;: 524288,
    &quot;base_per_transaction_net_usage&quot;: 12,
    &quot;net_usage_leeway&quot;: 500,
    &quot;context_free_discount_net_usage_num&quot;: 20,
    &quot;context_free_discount_net_usage_den&quot;: 100,
    &quot;max_block_cpu_usage&quot;: 100000,
    &quot;target_block_cpu_usage_pct&quot;: 500,
    &quot;max_transaction_cpu_usage&quot;: 50000,
    &quot;min_transaction_cpu_usage&quot;: 100,
    &quot;max_transaction_lifetime&quot;: 3600,
    &quot;deferred_trx_expiration_window&quot;: 600,
    &quot;max_transaction_delay&quot;: 3888000,
    &quot;max_inline_action_size&quot;: 4096,
    &quot;max_inline_action_depth&quot;: 4,
    &quot;max_authority_depth&quot;: 6
  },
  &quot;initial_chain_id&quot;: &quot;0000000000000000000000000000000000000000000000000000000000000000&quot;
}
</code></pre>
<ul>
<li>在<code>genesis</code>目录下创建启动脚本<code>genesis_start.sh</code>，内容如下，
<ul>
<li><strong>替换EOS_PUB_DEV_KEY和EOS_PRIV_DEV_KEY为之前创建的生产者密钥对</strong></li>
</ul>
</li>
</ul>
<pre><code class="language-sh">#!/bin/bash
DATADIR=&quot;./blockchain&quot;

if [ ! -d $DATADIR ]; then
  mkdir -p $DATADIR;
fi

nodeos \
--genesis-json $DATADIR&quot;/../../genesis.json&quot; \
--signature-provider EOS_PUB_DEV_KEY=KEY:EOS_PRIV_DEV_KEY \
--private-key '[&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;,&quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot; ]' \
--plugin eosio::producer_plugin \
--plugin eosio::producer_api_plugin \
--plugin eosio::chain_plugin \
--plugin eosio::chain_api_plugin \
--plugin eosio::http_plugin \
--plugin eosio::history_api_plugin \
--plugin eosio::history_plugin \
--data-dir $DATADIR&quot;/data&quot; \
--blocks-dir $DATADIR&quot;/blocks&quot; \
--config-dir $DATADIR&quot;/config&quot; \
--producer-name eosio \
--http-server-address 127.0.0.1:8888 \
--p2p-listen-endpoint 127.0.0.1:9010 \
--access-control-allow-origin=* \
--contracts-console \
--http-validate-host=false \
--verbose-http-errors \
--enable-stale-production \
--p2p-peer-address localhost:9011 \
--p2p-peer-address localhost:9012 \
--p2p-peer-address localhost:9013 \
&gt;&gt; $DATADIR&quot;/nodeos.log&quot; 2&gt;&amp;1 &amp; \
echo $! &gt; $DATADIR&quot;/eosd.pid&quot;
</code></pre>
<ul>
<li>在<code>genesis</code>目录下创建启动脚本<code>stop.sh</code>，内容如下</li>
</ul>
<pre><code class="language-sh">#!/bin/bash
DATADIR=&quot;./blockchain/&quot;

if [ -f $DATADIR&quot;/eosd.pid&quot; ]; then
pid=`cat $DATADIR&quot;/eosd.pid&quot;`
echo $pid
kill $pid
rm -r $DATADIR&quot;/eosd.pid&quot;
echo -ne &quot;Stoping Node&quot;
while true; do
[ ! -d &quot;/proc/$pid/fd&quot; ] &amp;&amp; break
echo -ne &quot;.&quot;
sleep 1
done
echo -ne &quot;\rNode Stopped. \n&quot;
fi
</code></pre>
<h2 id="启动网络查看日志">启动网络查看日志</h2>
<pre><code class="language-sh">## 启动节点
sh genesis_start.sh
## 查看日志
tail -f blockchain/nodeos.log
</code></pre>
<h2 id="正确的日志输出">正确的日志输出</h2>
<pre><code class="language-sh">info  2021-03-17T15:00:30.481 thread-1  net_plugin.cpp:982            _close               ] closing 'localhost:9011', localhost:9011
info  2021-03-17T15:00:30.481 thread-2  net_plugin.cpp:982            _close               ] closing 'localhost:9013', localhost:9013
info  2021-03-17T15:00:30.901 thread-0  producer_plugin.cpp:2224      produce_block        ] Produced block 97ce442a6d8a489f... #3 @ 2021-03-17T15:00:31.000 signed by eosio [trxs: 0, lib: 2, confirmed: 0]
info  2021-03-17T15:00:31.402 thread-0  producer_plugin.cpp:2224      produce_block        ] Produced block 073ddfbf0e1e57be... #4 @ 2021-03-17T15:00:31.500 signed by eosio [trxs: 0, lib: 3, confirmed: 0]
info  2021-03-17T15:00:31.902 thread-0  producer_plugin.cpp:2224      produce_block        ] Produced block 8fe5493dedc69ab9... #5 @ 2021-03-17T15:00:32.000 signed by eosio [trxs: 0, lib: 4, confirmed: 0]
info  2021-03-17T15:00:32.401 thread-0  producer_plugin.cpp:2224      produce_block        ] Produced block 4c22df63112035f2... #6 @ 2021-03-17T15:00:32.500 signed by eosio [trxs: 0, lib: 5, confirmed: 0]
info  2021-03-17T15:00:32.901 thread-0  producer_plugin.cpp:2224      produce_block        ] Produced block 1e4753db203a406e... #7 @ 2021-03-17T15:00:33.000 signed by eosio [trxs: 0, lib: 6, confirmed: 0]
</code></pre>
<h2 id="正确的目录结构">正确的目录结构</h2>
<pre><code>biosboot
├── genesis
│   ├── blockchain
│   │   ├── config
│   │   │   ├── config.ini
│   │   │   └── protocol_features
│   │   │       ├── BUILTIN-DISALLOW_EMPTY_PRODUCER_SCHEDULE.json
│   │   │       ├── BUILTIN-FIX_LINKAUTH_RESTRICTION.json
│   │   │       ├── BUILTIN-FORWARD_SETCODE.json
│   │   │       ├── BUILTIN-GET_SENDER.json
│   │   │       ├── BUILTIN-NO_DUPLICATE_DEFERRED_ID.json
│   │   │       ├── BUILTIN-ONLY_BILL_FIRST_AUTHORIZER.json
│   │   │       ├── BUILTIN-ONLY_LINK_TO_EXISTING_PERMISSION.json
│   │   │       ├── BUILTIN-PREACTIVATE_FEATURE.json
│   │   │       ├── BUILTIN-RAM_RESTRICTIONS.json
│   │   │       ├── BUILTIN-REPLACE_DEFERRED.json
│   │   │       ├── BUILTIN-RESTRICT_ACTION_TO_SELF.json
│   │   │       ├── BUILTIN-WEBAUTHN_KEY.json
│   │   │       └── BUILTIN-WTMSIG_BLOCK_SIGNATURES.json
│   │   ├── data
│   │   │   ├── blockchain
│   │   │   │   └── blocks
│   │   │   │       ├── blocks.index
│   │   │   │       ├── blocks.log
│   │   │   │       └── reversible
│   │   │   │           └── shared_memory.bin
│   │   │   ├── snapshots
│   │   │   └── state
│   │   │       ├── fork_db.dat
│   │   │       └── shared_memory.bin
│   │   └── nodeos.log
│   ├── genesis_start.sh
│   └── stop.sh
└── genesis.json

10 directories, 23 files
</code></pre>
]]></content>
    </entry>
</feed>